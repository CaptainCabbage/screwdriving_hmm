classdef state  < matlab.mixin.Copyable
    properties
        name
        model % AX = 0
        n_model % if n_model = 1, gaussian; n_model > 1, gmm
        feature_extraction % a function handle which extract features
        prob_param
        
    end
    
    methods
        
        function obj = state(name,model,feature_extraction)
            obj.name = name;
            obj.n_model = numel(model);
            obj.feature_extraction = feature_extraction;
            if obj.n_model > 1
                % gmm
                for i =1:obj.n_model
                    obj.prob_param.c{i} = 1/n_model;
                    obj.prob_param.mean{i} = zeros(size(model{i},1),1);
                    obj.prob_param.covar{i} = eye(size(model{i},1));
                end
            else
                obj.prob_param.mean = zeros(size(model,1),1);
                obj.prob_param.covar = eye(size(model,1));
            end
        end
                
        function error = model_residual(obj, observation)
            o = observation;
            X = obj.feature_extraction(o.force, o.torque, o.encoder, o.current, o.velocity, o.screwdrivertip, o.time);
            if obj.n_model > 1
                error = cell(obj.n_model,1);
                for i = 1:obj.n_model
                    error{i} = sum(obj.model{i}.*[X{i},ones(size(X{i}))], 2);
                end
            else
                error = sum(obj.model.*[X,ones(size(X))], 2);
            end
        end
        
        function p = prob(obj, observation)
             err = obj.model_residual(observation);
             p = sum(obj.prob_m(err));
            if n_model > 1
                %gmm
            else
                %gaussian
                p = mvnpdf(err,obj.prob_param.mean,obj.prob_param.covar); 
            end
        end
        
        function p = prob_m(obj, err)
             if n_model > 1
                %gmm
                p=[];
                for i = 1:n_model
                    p = [p, obj.prob_param.c{i}*mvnpdf(err{i},obj.prob_param.mean{i},obj.prob_param.covar{i})];
                end
            else
                %gaussian
                p = mvnpdf(err,obj.prob_param.mean,obj.prob_param.covar); 
            end
            
        end
        
        function updateparam(obj, loggammas, observations) 
            T = numel(observations);
            gammas = exp(loggammas); % 1 x num_timestep
            if n_model > 1
                %gmm
                x = cell(n_model,1);
                prob = zeros(n_model,T);
                for t = 1:T
                    err = obj.model_residual(observations{t});
                    prob(:,t) = obj.prob_m(err);
                    for i = 1:n_model
                        x{i} = [x{i}, err{i}];
                    end
                end
                gammas = exp(loggammas)prob/sum
                
                    
            else
                %gaussian
                x1 = obj.model_residual(observations{1});
                x = zeros(size(x1,1),T);
                x(:,1) = x1;
                for t = 2:T
                    x = obj.model_residual(observations{t});
                end
                obj.prob_param.mean = sum(gammas.*x, 2)/sum(gammas);
                u = sqrt(gammas).*(x - obj.prob_param.mean);
                obj.prob_param.covar =  u*u'/sum(gammas);
            
            end
            
        end
        
    end
    
end